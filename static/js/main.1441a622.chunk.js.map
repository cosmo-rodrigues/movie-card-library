{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/EditMovie.js","pages/MovieDetails.js","pages/MovieList.js","pages/NewMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","placeholder","id","type","value","onChange","event","updateMovie","target","htmlFor","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","data-testid","src","alt","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","getMovie","movieId","find","mov","parseInt","Promise","resolve","setTimeout","updatedMovie","map","createMovie","movieData","nextId","length","newMovie","deleteMovie","filter","status","EditMovie","shouldRedirect","fecthMovie","match","params","movieAPI","requestMovie","MovieDetails","undefined","loading","fetchMovie","requestMovieDelete","a","MovieList","key","NewMovie","redirect","NotFound","App","component","exact","path","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1441a622.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"loading\">\n        <h1>Carregando...</h1>\n      </div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o título\"\n          id=\"movie_title\"\n          type=\"text\"\n          className=\"validate\"\n          value={title}\n          onChange={(event) => this.updateMovie('title', event.target.value)}\n        />\n        <label htmlFor=\"movie_title\">Título</label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Insira o subtítulo\"\n          id=\"movie_subtitle\"\n          type=\"text\"\n          value={subtitle}\n          onChange={(event) => this.updateMovie('subtitle', event.target.value)}\n        />\n        <label htmlFor=\"movie_subtitle\">Subtítulo</label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <input\n          placeholder=\"Insira o caminho da imagem\"\n          id=\"movie_image\"\n          type=\"text\"\n          value={imagePath}\n          onChange={(event) => this.updateMovie('imagePath', event.target.value)}\n        />\n        <label htmlFor=\"movie_image\">Imagem</label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <textarea\n          id=\"movie_storyline\"\n          value={storyline}\n          onChange={(event) => this.updateMovie('storyline', event.target.value)}\n        />\n        <label htmlFor=\"movie_storyline\">Sinopse</label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n\n    return (\n      <div>\n        <label htmlFor=\"movie_genre\">Gênero</label>\n        <select\n          id=\"movie_genre\"\n          value={genre}\n          onChange={(event) => this.updateMovie('genre', event.target.value)}\n        >\n          <option value=\"action\">Ação</option>\n          <option value=\"comedy\">Comédia</option>\n          <option value=\"thriller\">Suspense</option>\n          <option value=\"fantasy\">Fantasia</option>\n        </select>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n\n    return (\n      <div>\n        <input\n          placeholder=\"Dê a avaliação do filme\"\n          id=\"movie_rating\"\n          type=\"number\"\n          step={0.1}\n          min={0}\n          max={5}\n          value={rating}\n          onChange={(event) => this.updateMovie('rating', event.target.value)}\n        />\n        <label htmlFor=\"movie_rating\">Avaliação</label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          type=\"button\"\n          onClick={this.handleSubmit}\n        >\n          Submit\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          {this.renderGenreSelection()}\n          {this.renderRatingInput()}\n          {this.renderSubmitButton()}\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { title, storyline, imagePath, genre, rating, subtitle, id } = this.props.movie;\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-card\">\n        <img className=\"movie-card-image\" src={imagePath} alt={title} />\n        <div className=\"movie-card-body\">\n          <h4 className=\"movie-card-title\">{title}</h4>\n          <h5 className=\"movie-card-subtitle\">{subtitle}</h5>\n          <p>Genre: {genre}</p>\n          <p className=\"movie-card-storyline\">{storyline}</p>\n        </div>\n        <span className=\"rating\">Rating: {rating}</span>\n        <Link to={`/movies/${id}`} className=\"detailes\" >VER DETALHES</Link>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    subtitle: PropTypes.string.isRequired,\n    storyline: PropTypes.string.isRequired,\n    imagePath: PropTypes.string.isRequired,\n    rating: PropTypes.number.isRequired,\n    genre: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\n\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    setTimeout(() => {\n      const movies = readMovies();\n      resolve(movies);\n    }, 2000);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve(movie);\n    }, 2000);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => {\n  const movies = readMovies().map((movie) => {\n    if (movie.id === parseInt(updatedMovie.id, 10)) {\n      return { ...movie, ...updatedMovie };\n    }\n    return movie;\n  });\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const createMovie = (movieData) => {\n  let movies = readMovies();\n  const nextId = movies[movies.length - 1].id + 1;\n  const newMovie = { ...movieData, id: nextId };\n  movies = [...movies, newMovie];\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('OK');\n    }, 1000);\n  });\n};\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve({ status: 'OK' });\n    }, 1000);\n  });\n};\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: {},\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    this.fecthMovie();\n  }\n\n  // Solução de bloco de edição sugerida por Edu Souza - T07\n  async fecthMovie() {\n    const { id } = this.props.match.params;\n    const requestMovie = await movieAPI.getMovie(id);\n    this.setState({ movie: requestMovie, status: 'loaded' });\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      // Redirect\n      return <Redirect to=\"/\" />;\n    }\n\n    if (status === 'loading') {\n      // render Loading\n      return <Loading />;\n    }\n\n    return (\n      <div className=\"movie-form\" data-testid=\"edit-movie\">\n        <MovieForm movie={movie} onSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n\nexport default EditMovie;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor() {\n    super();\n    this.state = {\n      movies: undefined,\n      loading: true,\n    };\n    this.deleteMovie = this.deleteMovie.bind(this);\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async deleteMovie() {\n    const { id } = this.props.match.params;\n    const requestMovieDelete = await movieAPI.deleteMovie(id);\n    return requestMovieDelete;\n  }\n\n  async fetchMovie() {\n    this.setState({ loading: true },\n      async () => {\n        const movies = await movieAPI.getMovie(this.props.match.params.id);\n        this.setState({\n          movies,\n          loading: false,\n        });\n      });\n  }\n  render() {\n    // Change the condition to check the state\n    if (this.state.loading) return <Loading />;\n\n    const { title,\n            storyline,\n            imagePath,\n            genre,\n            rating,\n            subtitle,\n            id,\n          } = this.state.movies;\n\n    return (\n      <div className=\"movie-card\" data-testid=\"movie-details\">\n        <img className=\"movie-card-image\" alt=\"Movie Cover\" src={`../${imagePath}`} />\n        <p>{`Title: ${title}`}</p>\n        <p>{`Subtitle: ${subtitle}`}</p>\n        <p>{`Storyline: ${storyline}`}</p>\n        <p>{`Genre: ${genre}`}</p>\n        <p>{`Rating: ${rating}`}</p>\n        <Link className=\"link\" to=\"/\">VOLTAR</Link>\n        <Link className=\"link\" to={`./${id}/edit`}>EDITAR</Link>\n        <Link className=\"link\" to=\"/\" onClick={this.deleteMovie}>DELETAR</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport MovieCard from '../components/MovieCard';\nimport Loading from '../components/Loading';\n\nimport * as movieAPI from '../services/movieAPI';\n\nclass MovieList extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      movies: [],\n      loading: true,\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  async fetchMovie() {\n    this.setState({ loading: true },\n      async () => {\n        const movies = await movieAPI.getMovies();\n        this.setState({\n          movies,\n          loading: false,\n        });\n      });\n  }\n\n  render() {\n    const { movies, loading } = this.state;\n    return (\n      <div>\n        <h1 className=\"title\">Movie Card Library</h1>\n        <div className=\"movie-list\" data-testid=\"movie-list\">\n          { loading ? <Loading /> :\n        movies.map((movie) => <MovieCard key={movie.title} movie={movie} />)\n        }<br />\n        </div>\n        <Link className=\"add-movie\" to=\"/movies/new\">ADICIONAR CARTÃO</Link>\n      </div>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { MovieForm, Loading } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      loading: false,\n      redirect: false,\n    };\n  }\n\n  handleSubmit(newMovie) {\n    this.setState({ loading: true },\n      async () => {\n        await movieAPI.createMovie(newMovie);\n        this.setState({\n          loading: false,\n          redirect: true,\n        });\n      });\n  }\n\n  render() {\n    const { loading, redirect } = this.state;\n    if (redirect) return <Redirect to=\"/\" />;\n    return (\n      <div data-testid=\"new-movie\">\n        {loading ? <Loading /> : <MovieForm onSubmit={this.handleSubmit} />}\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport { MovieList, MovieDetails, NewMovie, EditMovie, NotFound } from './pages';\nimport './App.css';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route component={MovieList} exact path=\"https://cosmors.github.io/movie-card-library/\" />\n        <Route component={NewMovie} exact path=\"https://cosmors.github.io/movie-card-library/movies/new\" />\n        <Route component={EditMovie} exact path=\"https://cosmors.github.io/movie-card-library/movies/:id/edit\" />\n        <Route component={MovieDetails} exact path=\"https://cosmors.github.io/movie-card-library/movies/:id\" />\n        <Route component={NotFound} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}